---
description: "공유 시스템 개발 시 참고하세요 - 사용자 초대, 역할 관리, 권한 제어, 공개 링크 기능"
---

## 8. 공유 (Sharing)

### 라우터
* `GET /api/canvases/[canvasId]/shares`: 캔버스를 공유받은 사용자 목록과 역할을 조회합니다.
* `POST /api/canvases/[canvasId]/shares`: 이메일로 새 사용자를 초대하여 캔버스를 공유하고 역할을 설정합니다.
* `PATCH /api/canvases/[canvasId]/shares/[userId]`: 공유된 사용자의 역할(owner/editor/viewer)을 변경합니다.
* `DELETE /api/canvases/[canvasId]/shares/[userId]`: 특정 사용자와의 공유를 해제합니다.
* `GET /api/canvases/[canvasId]/role`: 현재 사용자의 캔버스에 대한 최종 역할(워크스페이스 + 개별 공유 권한 조합)을 반환합니다.
* `GET /api/public/canvas/[canvasId]`: 공개 설정된 캔버스의 읽기 전용 데이터를 조회합니다.

### 스키마 (Drizzle ORM)
* `canvasShares`: 캔버스별 개별 공유 정보를 저장하며 `canvasId`, `userId`, `role`('owner' | 'editor' | 'viewer'), `sharedBy`, `createdAt` 필드를 포함합니다.
* `canvases.isPublic`: 캔버스의 공개/비공개 상태를 관리하여 공개 링크 접근을 제어합니다.

### 서비스 함수/훅
* `CanvasShareModal (Component)`: 캔버스 공유 UI를 제공하며, 사용자 초대, 역할 변경, 공개 설정을 처리합니다.
* `useCanvasRole (Hook)`: 현재 사용자의 캔버스 접근 권한과 역할을 조회하고 UI 권한을 제어합니다.
* `getCanvasAccessInfo (Service)`: 사용자 ID와 캔버스 ID로 워크스페이스 권한과 개별 공유 권한을 조합하여 최종 접근 권한을 판정합니다.
* `withAuthorization (HOF)`: API 라우트 핸들러를 래핑하여 리소스 접근 권한을 검증하고 무권한 접근을 차단합니다.
* `ReadOnlyCanvasClient (Component)`: 공개 캔버스를 읽기 전용 모드로 렌더링하며 편집 기능을 비활성화합니다.

### 핵심 특징
* **계층적 권한 시스템**: 워크스페이스 멤버십과 개별 캔버스 공유를 조합하여 최종 권한을 결정합니다.
* **세분화된 역할**: owner(모든 권한) → editor(편집 가능) → viewer(읽기 전용) 순으로 권한이 제한됩니다.
* **공개 링크**: 로그인 없이도 접근 가능한 읽기 전용 공개 캔버스 기능을 제공합니다.
* **실시간 권한 적용**: 권한 변경 시 UI에서 즉시 반영되어 사용자 경험을 향상시킵니다.