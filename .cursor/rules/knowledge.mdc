---
description: "지식 자료 관리 시 참고하세요 - 업로드, 크롤링, 벡터 검색, RAG 시스템 기능"
---

## 지식 자료 (Knowledge & Assets)

### 업로드 타입 및 처리 방식
* **PDF 업로드**: 파일 업로드 → 텍스트 추출 → 청킹 → 임베딩 → 지식 저장
* **YouTube 업로드**: URL 입력 → Apify로 자막 추출 → 청킹 → 임베딩 → 지식 저장  
* **웹사이트 URL**: URL 입력 → Firecrawl로 스크래핑 → 청킹 → 임베딩 → 지식 저장
* **텍스트 직접 입력**: 사용자 입력(최대 10,000자) → 청킹 → 임베딩 → 지식 저장

### 라우터
* `GET /api/assets/[assetId]`: 특정 자료(지식)의 상세 내용과 메타데이터를 조회합니다.
* `DELETE /api/assets/[assetId]`: 특정 자료(지식)와 연관된 청크를 함께 삭제합니다.
* `GET /api/canvases/[canvasId]/knowledge`: 특정 캔버스에 속한 모든 지식 자료 목록을 조회합니다.
* `POST /api/canvases/[canvasId]/crawl-and-save`: URL을 크롤링하거나 YouTube 자막을 추출하여 즉시 지식으로 저장합니다.
* `POST /api/workspaces/[workspaceId]/assets`: URL, YouTube, 텍스트 등 다양한 타입의 자료를 업로드하고 지식으로 저장합니다.
* `POST /api/workspaces/[workspaceId]/upload-pdf`: PDF 파일을 업로드하고 텍스트 추출, 청킹 후 지식으로 저장합니다.

### UI 컴포넌트
* `UploadModal`: 업로드 타입별 모달 라우터 (PDF, YouTube, URL, 텍스트)
* `TextUploadModal`: 텍스트 직접 입력 모달 (제목/본문, 10,000자 제한, 글자수 카운트)
* `PdfUploadModal`: PDF 파일 업로드 모달
* `YoutubeUploadModal`: YouTube URL 입력 모달
* `ScrapingUploadModal`: 웹사이트 URL 입력 모달
* `Sidebar`: 지식 업로드 버튼들과 업로드된 자료 목록 표시, 클릭 시 미리보기 모달

### 스키마 (Drizzle ORM)
* `canvasKnowledge`: 업로드된 자료의 원문(`content`), 처리된 내용(`processedContent`), 메타데이터(`title`, `assetType`, `metadata`, `sourceUrl`)를 저장합니다.
* `knowledgeChunks`: `canvasKnowledge`의 `content`를 청크로 나누고, 벡터 임베딩과 함께 저장하여 RAG 검색에 사용합니다.
* `assets`: 워크스페이스별 업로드 자료의 기본 정보(`type`, `title`, `status`, `metaJson`, `fileRef`)를 관리합니다.
* `assetChunks`: 자료를 청크로 분할하고 벡터 임베딩을 저장하여 시맨틱 검색을 지원합니다.

### 서비스 함수/훅

#### RAG 및 검색 서비스
* `CanvasRAGService (Service)`: 사용자 질문에 대해 지식 자료를 벡터 검색하고 웹 검색을 결합하여 AI 답변 컨텍스트를 구성합니다.
  - `buildContext()`: 쿼리 임베딩 생성 → 벡터 검색 → 컨텍스트 구성 전체 파이프라인 수행
  - `answerFromKnowledgeOnly()`: 지식 베이스만으로 답변 생성
  - `answerFromKnowledgeAndWeb()`: 지식+웹 검색 결합 답변 생성 (Perplexity 에이전트 포함)
  - `maybeSearchWeb()`: 메시지 유형에 따른 웹 검색 필요성 판별 및 실행

#### 자산 처리 서비스
* `AssetProcessor (Service)`: 다양한 타입의 자료를 통합 처리하여 지식으로 변환합니다.
  - `processAsset()`: YouTube/URL/텍스트 자산을 텍스트 추출 → 청킹 → 임베딩 → 저장
  - `processYouTube()`: YouTube URL에서 Apify를 통한 자막 추출
  - `processURL()`: 웹 URL에서 Firecrawl을 통한 콘텐츠 스크래핑
  - `chunkText()`: 텍스트를 1000자 단위로 청킹
  - `estimateTokens()`: 청크별 토큰 수 추정

#### 캔버스 내부 데이터 동기화
* `upsertCanvasNodesKnowledge (Service)`: 노드 데이터를 `canvas_knowledge`로 동기화하여 AI가 참조할 수 있도록 합니다.
  - 최신 `canvas_states`에서 노드 로드 → 포맷팅 → 청킹 → 임베딩 → 지식 저장
* `upsertCanvasMemosKnowledge (Service)`: 메모 데이터를 `canvas_knowledge`로 동기화합니다.
  - `text_memos` 테이블 조회 → 번호 매기기 → 청킹 → 임베딩 → 지식 저장
* `upsertCanvasTodosKnowledge (Service)`: 할일 데이터를 `canvas_knowledge`로 동기화합니다.
  - `canvas_todos` 테이블 조회 → 완료/미완료 분류 → 청킹 → 임베딩 → 지식 저장

#### 외부 서비스 연동
* `OpenAIService`: 텍스트 임베딩 생성과 청킹, AI 답변 생성을 담당합니다.
  - `generateEmbedding()`: 텍스트를 벡터로 변환
  - `chat()`: GPT 모델을 통한 답변 생성
* `extractYouTubeTranscript (Service)`: Apify를 사용하여 YouTube 영상의 자막과 메타데이터를 추출합니다.
* `firecrawlService (Service)`: Firecrawl API를 사용하여 웹사이트 콘텐츠를 스크래핑하고 구조화합니다.
* `WebSearchService`: 웹 검색을 통한 실시간 정보 수집
* `PerplexityService`: Perplexity API를 통한 검색+답변 통합 서비스

#### 프롬프트 및 컨텍스트 구성
* `buildSystemPrompt()`: 지식 컨텍스트와 채팅 히스토리를 기반으로 시스템 프롬프트 생성
* `buildKBOnlySystemPrompt()`: 지식 베이스만 사용하는 시스템 프롬프트 생성
* `buildKBAndWebSystemPrompt()`: 지식+웹 검색 결합 시스템 프롬프트 생성
* `formatChatHistory()`: 채팅 히스토리를 프롬프트용 텍스트로 포맷팅

#### 데이터 저장 및 조회
* `storage (Service)`: 지식 자료 관련 데이터베이스 작업을 담당합니다.
  - `updateAsset()`: 자산 상태 및 메타데이터 업데이트
  - `createAssetChunk()`: 자산 청크 생성 및 임베딩 저장
  - `getCanvasKnowledgeByAssetId()`: 자산 ID로 지식 데이터 조회
  - `getTopKKnowledge()`: 벡터 유사도 기반 상위 K개 지식 청크 조회

#### React 훅 (클라이언트)
* `useCanvasStore (Hook)`: 캔버스 상태 전역 관리 (노드/엣지/뷰포트/드래그/연결 상태)
  - 노드/엣지 CRUD 액션 제공
  - 드래그/패닝/연결 상호작용 상태 관리
* `useCanvasSync (Hook)`: 캔버스 상태 서버 동기화 (디바운스 저장)
  - Zustand 스토어 변화 감지 → 디바운스 저장 → `/api/canvases/:id/state` POST
  - 수동 저장 API 및 변경 해시 비교로 불필요한 저장 방지
* `useCanvasRole (Hook)`: 캔버스 접근 권한 관리
  - `canEdit`, `canShare`, `canDelete` 권한 상태 제공
* `useWorkspaceRole (Hook)`: 워크스페이스 접근 권한 관리
  - 워크스페이스 레벨 권한 검증 및 상태 제공

### 업로드 워크플로우
1. **사용자 액션**: 사이드바에서 업로드 타입 선택 (PDF/YouTube/URL/텍스트)
2. **모달 표시**: 해당 타입의 업로드 모달이 열림
3. **데이터 입력**: 파일 업로드 또는 URL/텍스트 입력
4. **서버 처리**: `/api/workspaces/[workspaceId]/assets` POST 요청
5. **지식 변환**: 
   - PDF: 텍스트 추출 → 청킹 → 임베딩
   - YouTube: 자막 추출 → 청킹 → 임베딩  
   - URL: 스크래핑 → 청킹 → 임베딩
   - 텍스트: 직접 청킹 → 임베딩
6. **저장 완료**: `canvas_knowledge`와 `knowledge_chunks` 테이블에 저장
7. **UI 업데이트**: 사이드바에 업로드된 자료 목록 표시
8. **미리보기**: 자료 클릭 시 `/api/assets/[assetId]` GET으로 본문 조회 후 모달 표시

### 핵심 특징
* **멀티소스 지원**: PDF, YouTube, 웹사이트, 텍스트 등 다양한 형태의 지식 자료를 통합 관리합니다.
* **벡터 검색**: OpenAI 임베딩을 활용한 시맨틱 검색으로 관련성 높은 지식을 빠르게 찾습니다.
* **자동 동기화**: 캔버스 내 노드, 메모, 할일 변경 시 자동으로 지식 베이스에 반영하여 AI가 최신 정보를 활용할 수 있습니다.
* **실시간 미리보기**: 업로드된 자료를 클릭하면 즉시 본문 내용을 모달로 확인할 수 있습니다.
* **통합 관리**: 모든 타입의 지식 자료를 하나의 인터페이스에서 관리하고 검색할 수 있습니다.